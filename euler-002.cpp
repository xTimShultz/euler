// https://projecteuler.net/problem=2
// Each new term in the Fibonacci sequence is generated by adding the
// previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.
// 
// Solution By Tim Shultz, September 2021
//
// Fib(n) = Fib(n-2) + Fib(n-1)
//
// Can be computed iteratively by counting from 1, 2, 3, 5, 8,...
//
// This algorithm uses an array as a sliding window on two previously computed numbers
// Where:
//   prev_fib[0] = Fib(n-2)
//   prev_fib[1] = Fib(n-1)
//
// Only even numbers are added to the summing accumulator: fib_sum
// A number is even if there is no remainder when divided by 2.
// This is written as (fib_prev[1] % 2) == 0
//

#include <iostream>

using std::cout;
using std::endl;

// First two Fibonacci numbers
unsigned long long fib_prev[2] = {1, 2};

int main()
{
    const unsigned long long upper_limit = 4000000; // Upper limit exclusive of this value
    
    unsigned long long fib_sum = 0; // Result of even fibonnaci sum. 
    unsigned long long next_fib = 0; // The next Fibonacci number in the sequence

    // until the limit
    while (fib_prev[1] < upper_limit)
    {
        // Add only even numbers to the sum
        if (fib_prev[1] % 2 == 0)
        {
            //cout << "--------------> " << fib_sum << " + " << fib_prev[1];
            fib_sum += fib_prev[1];
            //cout << " = " << fib_sum << endl;
        }
 
        // Sequence to next Fibonacci number
        unsigned long long next_fib = fib_prev[0] + fib_prev[1];
        fib_prev[0] = fib_prev[1];
        //cout << "[" << fib_prev[0] << "," << fib_prev[1] << "] = " << next_fib << endl;
        fib_prev[1] = next_fib;
        
    }

    cout << fib_sum << endl;
    return 0;
}